<%
/*
 *  Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
/*
 Descripiton: Invoke routed api endpoints

 */
var DEFAULT_PAGIN = {
    'start': 0,
    'count': 10,
    'sortOrder': 'ASC',
    'sortBy': '',
    'paginationLimit': 1000
};
require('/modules/store.js').exec(function(ctx) {
    var log = new Log();
    var ref = require('utils').request;
    var responseProcessor = require('utils').response;
    var res = ctx.response;
    var req = ctx.request;
    var session = ctx.session;
    var uriMatcher = new URIMatcher(ctx.request.getRequestURI());
    var assetApi = require('/modules/asset-api.js').api;
    var lcApi = require('/modules/lifecycle-api.js').api;
    var CREATE_URL = '/{context}/apis/assets/';
    var UPDATE_URL = '/{context}/apis/assets/{id}';
    var CHANGE_STATE_URL = '/{context}/apis/assets/{id}/{nextState}';
    var GET_STATE_URL = '/{context}/apis/assets/{id}/state';
    var LIST_ASSETS_URL = '/{context}/apis/assets/';
    var GET_ASSET_URL = '/{context}/apis/assets/{id}';
    var GET_CURRENT_STATE_URL = '/{context}/apis/assets/{id}/state';
    var DELETE_ASSET_URL = '/{context}/apis/assets/{id}';
    var method = req.getMethod();
    var options = ref.getQueryOptions(req.getQueryString());
    response.contentType = 'application/json';
    var result = {};
    switch (method) {
        case 'POST':
            if (uriMatcher.match(CREATE_URL)) {
                var asset = assetApi.create(options, req, res, session);
                //If the asset is successfully created then return the asset
                if (asset) {
                    // print(responseProcessor.buildSuccessResponse(res, 201, asset));
                    response = responseProcessor.buildSuccessResponse(res, 201, asset)
                } else {
                    response = responseProcessor.buildErrorResponse(res, 500, 'Failed to create asset of type: ' + options.type);
                    //print(responseProcessor.buildErrorResponse(res, 500, 'Unable to create asset', {}));
                }
            } else if (uriMatcher.match(UPDATE_URL)) {
                options.id = uriMatcher.elements().id;
                var asset = assetApi.update(options, req, res, session);
                //if the asset is sucessfully updated
                if (asset) {
                    //print(responseProcessor.buildSuccessResponse(200, 'Updated the asset successfully', asset));
                    response = responseProcessor.buildSuccessResponse(response, 200, asset)
                } else {
                    // print(responseProcessor.buildErrorResponse(500, 'Unable to update the asset', {}));
                    response = responseProcessor.buildErrorResponse(response, 500, 'Unable to update the asset');
                }
            } else if (uriMatcher.match(CHANGE_STATE_URL)) {
                var elements = uriMatcher.elements();
                options.id = elements.id;
                options.nextState = elements.nextState;
                var success = lcApi.changeState(options, req, res, session);
                if (success == true) {
                    //print(responseProcessor.buildSuccessResponse(200, 'Changed the state to ' + options.nextState));
                    response = responseProcessor.buildSuccessResponse(response, 200, 'Changed the state to ' + options.nextState);
                } else {
                    //print(responseProcessor.buildErrorResponse(500, 'Unable to change the state'));
                    response = responseProcessor.buildErrorResponse(response, 500, 'Unable to change the state');
                }
            } else {
                //print(responseProcessor.buildErrorResponse(404, 'Unable to locate this POST endpoint'));
                response = responseProcessor.buildErrorResponse(response, 404, 'Unable to locate this POST endpoint');
            }
            break;
        case 'GET':
            options.type = req.getParameter('type');
            options.domain = req.getParameter('domain');

            if (uriMatcher.match(LIST_ASSETS_URL)) {
                var assets = [];
                if(options.type) {
                    if(log.isDebugEnabled()){
                       log.debug('Type specific advanced search');
                    }
                    assets = assetApi.advanceSearch(options, req, res, session);
                } else {
                    if(log.isDebugEnabled()){
                        log.debug('Generic advanced search');
                    }
                    assets = assetApi.genericAdvanceSearch(options,req,res,session);
                }
                
                response = responseProcessor.buildSuccessResponse(response, 200, assets);
            } else if (uriMatcher.match(GET_ASSET_URL)) {
                options.id = uriMatcher.elements().id;
                var asset = assetApi.get(options, req, res, session);
                if (asset) {
                    response = responseProcessor.buildSuccessResponse(response, 200, asset);
                } else {
                    response = responseProcessor.buildErrorResponse(response, 400, "No matching asset found");
                }
            } else if (uriMatcher.match(GET_STATE_URL)) {
                options.id = uriMatcher.elements().id;
                var state = lcApi.getState(options, req, res, session);
                response = responseProcessor.buildSuccessResponse(response, 200,state);
            } else {
                response = responseProcessor.buildErrorResponse(response, 404, 'Unable to locate this GET endpoint');
            }
            break;

        case 'DELETE':
            options.type = req.getParameter('type');
            if (uriMatcher.match(DELETE_ASSET_URL)) {
                options.id = uriMatcher.elements().id;
                var done=assetApi.remove(options, req, res, session);
                var result = [];
                if(done){
                    response = responseProcessor.buildSuccessResponse(response,200,result);
                }else{
                    response = responseProcessor.buildErrorResponse(response,400,"No matching asset found");
                }
            }
            else {
                response = responseProcessor.buildErrorResponse(response, 404, 'Unable to locate this GET endpoint');
            }
            break;

        default:
            response = responseProcessor.buildErrorResponse(response, 501, 'The endpoint that you have requested is not implemented for the ' + method + ' method.Try making the request with the appropriate verb (hint: create/update operations use POST).');
    }
}, request, response, session); %>
