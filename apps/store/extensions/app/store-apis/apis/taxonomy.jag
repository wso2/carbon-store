<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
require('/modules/store.js').exec(function (ctx) {
    var log = new Log('asset_api_categories');
    var Taxonomy = require('taxonomy').taxonomy;
    var rxtModule = require('rxt');
    var responseProcessor = require('utils').response;
    var res = ctx.response;
    var req = ctx.request;
    var uriMatcher = new URIMatcher(req.getRequestURI());
    var method = req.getMethod();
    var response;
    var constants = require('rxt').constants;
    var acceptHeader, jsonHeaderAccept;
    var utils = require('utils');
    var ref = utils.request;
    var store = require('store');
    var carbon = require('carbon');
    var user = store.server.current(session);
    var MultiTenantConstants = Packages.org.wso2.carbon.base.MultitenantConstants;
    var username = user ? user.username : carbon.user.anonUser;
    var tenantId;
    var taxaPathList = [];

    var taxonomyPatternDefault = '/{context}/apis/taxonomies';
    var taxonomyPatternAssetType = '/{context}/apis/taxonomies/{name}';
    var taxonomyPatternTerm = '/{context}/apis/taxonomies/{name}/{+term}';

    uriMatcher.match(taxonomyPatternDefault);
    uriMatcher.match(taxonomyPatternAssetType);
    var taxonomyAssetTypeOptions = uriMatcher.elements() || {};
    uriMatcher.match(taxonomyPatternTerm);
    var taxonomyTermOptions = uriMatcher.elements() || {};


    var defaultPagination = function (options, key, limit) {
        return (options[key] ? options[key] : limit);
    };

    switch (method) {
        case 'GET':// GET endpoints
            var options = ref.getQueryOptions(req.getQueryString());
            acceptHeader = req.getHeader(constants.ACCEPT_HEADER) || constants.ACCEPT_ALL;
            jsonHeaderAccept = acceptHeader.indexOf(constants.APPLICATION_JSON);

            var tenantDomains = options.tenant ? options.tenant : MultiTenantConstants.SUPER_TENANT_DOMAIN_NAME;
            tenantId = carbon.server.tenantId({domain: tenantDomains});
            options.tenantId = tenantId;
            options.username = username;

            if (uriMatcher.match(taxonomyPatternDefault)) {
                try {
                    if (jsonHeaderAccept >= 0 || acceptHeader == constants.ACCEPT_ALL) {
                        if (options['assetType']) {
                            if (options['assetType']=="all") {
                                var TaxonomyService = carbon.server.
                                osgiService('org.wso2.carbon.governance.taxonomy.services.ITaxonomyServices');
                                var HashMap = java.util.HashMap;
                                var map = new HashMap();
                                map = TaxonomyService.getTaxonomyBeanMap();
                                var entries = map.entrySet().iterator();
                                var topAssetArray = [];
                                while (entries.hasNext()) {
                                    var obj = entries.next();
                                    if (obj.getValue().isTaxonomyGlobal()) {
                                        var taxonomyObject = {};
                                        taxonomyObject.name = obj.getKey();
                                        topAssetArray.push(taxonomyObject);
                                    }
                                }
                                response = responseProcessor.buildSuccessResponseForRxt(res, constants.STATUS_CODES.OK,
                                        topAssetArray);
                                return;
                            } else {
                                var coreApi = rxtModule.core;
                                var rxtManager = coreApi.rxtManager(tenantId);
                                var taxonomies;
                                var server = require('store').server;
                                server.sandbox({
                                    tenantId: tenantId,
                                    username: user ? user.username : carbon.user.anonUser,
                                    request: ctx.request
                                },function(){
                                    taxonomies = rxtManager.getTaxonomies(options['assetType']);
                                });
                                var jsonArray = [];
                                for (var i = 0; i < taxonomies.length; i++) {
                                    var taxonomyObj = {};
                                    taxonomyObj.name = taxonomies[i];
                                    jsonArray.push(taxonomyObj);
                                }
                                response = responseProcessor.buildSuccessResponseForRxt(res, constants.STATUS_CODES.OK,
                                        jsonArray);
                                return;
                            }
                        }
                    } else {
                        response = responseProcessor.buildErrorResponse(res,
                                constants.STATUS_CODES.UNSUPPORTED_MEDIATYPE, "error : Unsupported Media Type");
                        return;
                    }
                } catch (e) {
                    if (e.toString().indexOf("TaxonomyException") > 0) {
                        response = responseProcessor.buildErrorResponse(res, constants.STATUS_CODES.BAD_REQUEST,
                                "Bad syntax. Please provide correct syntax.");
                        log.error('Bad syntax. Please provide correct syntax.', e);
                    } else {
                        response = responseProcessor.buildErrorResponse(res, constants.STATUS_CODES.
                                        INTERNAL_SERVER_ERROR,
                                "Error on retrieving taxonomy.Server is unable to process the request.Please check " +
                                "your have entered a correct query");
                        log.error('Error on retrieving taxonomy.Server is unable to prddocess the request.Please ' +
                                'check your have entered a correct query', e);
                    }
                    return;
                }
            } else if (uriMatcher.match(taxonomyPatternAssetType)) {
                try {
                    if (jsonHeaderAccept >= 0 || acceptHeader == constants.ACCEPT_ALL) {
                        if (options['taxonomyId']) {
                            taxaPathList = Taxonomy.taxonomy.getTaxonomyName(options['taxonomyId'],
                                    taxonomyAssetTypeOptions.name);
                            response = responseProcessor.buildSuccessResponseForRxt(res, constants.STATUS_CODES.OK,
                                    taxaPathList);
                            return;
                        }
                        if (taxonomyAssetTypeOptions.name) {
                            store.server.sandbox(options, function () {
                                taxaPathList = Taxonomy.getNodesList("/*",
                                        defaultPagination(options, "startnode", 0),
                                        defaultPagination(options, "endnode", 200), taxonomyAssetTypeOptions.name);
                            });
                            response = responseProcessor.buildSuccessResponseForRxt(res, constants.STATUS_CODES.OK,
                                    taxaPathList);
                            return;
                        }
                    } else {
                        response = responseProcessor.buildErrorResponse(res, constants.STATUS_CODES.
                                UNSUPPORTED_MEDIATYPE, "error : Unsupported Media Type");
                        return;
                    }
                } catch (e) {
                    if (e.toString().indexOf("TaxonomyException") > 0) {
                        response = responseProcessor.buildErrorResponse(res, constants.STATUS_CODES.BAD_REQUEST,
                                "Bad syntax. Please provide correct syntax.");
                        log.error('Bad syntax. Please provide correct syntax.', e);
                    } else {
                        response = responseProcessor.buildErrorResponse(res, constants.STATUS_CODES.
                                        INTERNAL_SERVER_ERROR,
                                "Error on retrieving taxonomy.Server is unable to process the request. Please check " +
                                "your have entered a correct query");
                        log.error('Error on retrieving taxonomy.Server is unable to process the request.Please ' +
                                'check your have entered a correct query', e);
                    }
                    return;
                }
            } else if (uriMatcher.match(taxonomyPatternTerm)) {
                try {
                    if (jsonHeaderAccept >= 0 || acceptHeader == constants.ACCEPT_ALL) {

                        if (taxonomyTermOptions.term) {
                            if (options['children']) {
                                store.server.sandbox(options, function () {
                                    taxaPathList = Taxonomy.getNodesList(taxonomyTermOptions.term + "/children",
                                            defaultPagination(options, "startnode", 0),
                                            defaultPagination(options, "endnode", 200), taxonomyTermOptions.name);
                                });
                            } else {
                                store.server.sandbox(options, function () {
                                    taxaPathList = Taxonomy.getNodesList(taxonomyTermOptions.term,
                                            defaultPagination(options, "startnode", 0),
                                            defaultPagination(options, "endnode", 200), taxonomyTermOptions.name);
                                });
                            }
                            response = responseProcessor.buildSuccessResponseForRxt(res, constants.STATUS_CODES.OK,
                                    taxaPathList);
                            return;
                        } else {
                            response = responseProcessor.buildErrorResponse(res, constants.STATUS_CODES.BAD_REQUEST,
                                    "Bad syntax. Please provide correct taxonomy name.");
                            log.error('Bad syntax. Please provide correct taxonomy name.');
                            return;
                        }
                    } else {
                        response = responseProcessor.buildErrorResponse(res, constants.STATUS_CODES.
                                UNSUPPORTED_MEDIATYPE, "error : Unsupported Media Type");
                        return;
                    }
                } catch (e) {
                    if (e.toString().indexOf("TaxonomyException") > 0) {
                        response = responseProcessor.buildErrorResponse(res, constants.STATUS_CODES.BAD_REQUEST,
                                "Bad syntax. Please provide correct syntax.");
                        log.error('Bad syntax. Please provide correct syntax.', e);
                    } else {
                        response = responseProcessor.buildErrorResponse(res, constants.STATUS_CODES.
                                        INTERNAL_SERVER_ERROR,
                                "Error on retrieving taxonomy. Server is unable to process the request.Please check " +
                                "your have entered a correct query");
                        log.error('Error on retrieving taxonomy.Server is unable to process the request.Please ' +
                                'check your have entered a correct query', e);
                    }
                    return;
                }
            }
            break;
        default:
            response = responseProcessor.buildErrorResponseDefault(constants.STATUS_CODES.NOT_IMPLEMENTED,
                    'Not Implemented API endpoints', res,
                    'The endpoint that you have requested is not implemented for the ' + method +
                    ' method.Try making the request with the appropriate verb', []);

    }
}, request, response, session);



%>