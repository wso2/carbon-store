<%
/*
 * Copyright (c) WSO2 Inc. (http://wso2.com) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
require('/modules/store.js').exec(function (ctx) {
    var log = new Log('asset_api_categories');
    var taxa = require('taxonomy');
    var responseProcessor = require('utils').response;
    var res = ctx.response;
    var req = ctx.request;
    var uriMatcher = new URIMatcher(req.getRequestURI());
    var TAXA = '/{context}/apis/taxonomies';
    var method = req.getMethod();
    var response;
    var constants = require('rxt').constants;
    var acceptHeader, jsonHeaderAccept;
    var utils = require('utils');
    var ref = utils.request;
    var store = require('store');
    var carbon = require('carbon');
    var user = store.server.current(session);
    var MultitenantConstants = Packages.org.wso2.carbon.base.MultitenantConstants;
    var username = user ? user.username : carbon.user.anonUser;
    var tenantId;


    var defaultPagination = function (options, key, limit) {
        return (options[key] ? options[key] : limit);
    };

        switch (method) {
            case 'GET':// GET endpoints
                if (uriMatcher.match(TAXA)) {
                    acceptHeader = req.getHeader('Accept') || constants.ACCEPT_ALL;
                    jsonHeaderAccept = acceptHeader.indexOf('application/json');
                    try {
                        if (jsonHeaderAccept >= 0 || acceptHeader == constants.ACCEPT_ALL) {
                            var taxaPathList;
                            var options = ref.getQueryOptions(req.getQueryString());
                            var tenantDomain = options.tenant ? options.tenant : MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;
                            tenantId = carbon.server.tenantId({domain: tenantDomain});
                            options.tenantId = tenantId;
                            options.username = username;

                            if (options['terms']) {
                                store.server.sandbox(options, function () {
                                    taxaPathList = taxa.taxonomy.getNodesList(options['terms'],
                                            defaultPagination(options, "startnode", 0),
                                            defaultPagination(options, "endnode", 5));
                                });
                            } else {
                                store.server.sandbox(options, function () {
                                    taxaPathList = taxa.taxonomy.getNodesList("/*",
                                            defaultPagination(options, "startnode", 0),
                                            defaultPagination(options, "endnode", 5));
                                });
                            }
                            response = responseProcessor.buildSuccessResponseForRxt(res, constants.STATUS_CODES.OK,
                                    taxaPathList);
                            return;
                        } else {
                            response = responseProcessor.buildErrorResponse(res, constants.STATUS_CODES.
                                    UNSUPPORTED_MEDIATYPE, "error : Unsupported Media Type");
                            return;
                        }
                    } catch (e) {

                        if (e.toString().indexOf("javax.xml.xpath.XPathExpressionException") > 0) {
                            response = responseProcessor.buildErrorResponse(res, constants.STATUS_CODES.BAD_REQUEST,
                                    "Please provide correct syntax format");
                        } else {
                            response = responseProcessor.buildErrorResponse(res, constants.STATUS_CODES.INTERNAL_SERVER_ERROR,
                                    "error on retrieving all taxa");
                        }


                        return;
                    }
                }

                break;
            case 'POST':// POST endpoints

                if (uriMatcher.match(TAXA)) {
                    acceptHeader = req.getHeader('Accept') || constants.ACCEPT_ALL;
                    jsonHeaderAccept = acceptHeader.indexOf('application/json');
                    var options = req.getContent();

                    try {
                        if (jsonHeaderAccept >= 0 || acceptHeader == constants.ACCEPT_ALL) {
                            var taxaPathList;
                            var tenantDomain = options.tenant ? options.tenant : MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;
                            tenantId = carbon.server.tenantId({domain: tenantDomain});
                            options.tenantId = tenantId;
                            options.username = username;

                            if (options['terms']) {
                                store.server.sandbox(options, function () {
                                    taxaPathList = taxa.taxonomy.getNodesList(options['terms'],
                                            defaultPagination(options, "startnode", 0),
                                            defaultPagination(options, "endnode", 5));
                                });
                            } else {
                                store.server.sandbox(options, function () {
                                    taxaPathList = taxa.taxonomy.getNodesList("/*",
                                            defaultPagination(options, "startnode", 0),
                                            defaultPagination(options, "endnode", 5));
                                });
                            }


                            response = responseProcessor.buildSuccessResponseForRxt(res, constants.STATUS_CODES.OK,
                                    taxaPathList);
                            return;
                        } else {
                            response = responseProcessor.buildErrorResponse(res, constants.STATUS_CODES.
                                    UNSUPPORTED_MEDIATYPE, "error : Unsupported Media Type");
                            return;
                        }
                    } catch (e) {

                        if (e.toString().indexOf("javax.xml.xpath.XPathExpressionException") > 0) {
                            response = responseProcessor.buildErrorResponse(res, constants.STATUS_CODES.BAD_REQUEST,
                                    "Please provide correct syntax format");
                        } else {
                            response = responseProcessor.buildErrorResponse(res, constants.STATUS_CODES.INTERNAL_SERVER_ERROR,
                                    "error on retrieving all taxa");
                        }
                        return;
                    }
                }

                break;

            default:
                response = responseProcessor.buildErrorResponseDefault(constants.STATUS_CODES.NOT_IMPLEMENTED,
                        'Not Implemented API endpoints', res,
                        'The endpoint that you have requested is not implemented for the ' + method +
                        ' method.Try making the request with the appropriate verb', []);

        }

}, request, response, session);



%>