<%
/*
 *  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
require('/modules/store.js').exec(function (ctx) {
    var log = new Log('search-history');
    var utils = require('utils');
    var ref = utils.request;
    var GET_SEARCH_HISTORY_PATTERN = '/{context}/apis/search-history/';
    var responseProcessor = utils.response;
    var constants = rxt.constants;
    var response = ctx.response;
    var req = ctx.request;
    var uriMatcher = new URIMatcher(ctx.request.getRequestURI());
    var method = req.getMethod();
    var options = ref.getQueryOptions(req.getQueryString());
    var userApi = require('/modules/user-api.js').api;
    switch (method) {
        case 'GET':
            if (uriMatcher.match(GET_SEARCH_HISTORY_PATTERN)) {
                var queries = userApi.getSearchHistory(ctx.session, options.type);
                print(queries);
            }
            break;
        case 'POST':
            if (uriMatcher.match(GET_SEARCH_HISTORY_PATTERN)) {
                var content = req.getContent();
                var query, type;
                if (content) {
                    query = content.query;
                    type = content.type;
                }
                if (query) {
                    var searchQuery = utils.request.formatSearchQuery(query);
                    userApi.updateSearchHistory(ctx.session, searchQuery, type);
                    response = responseProcessor.buildSuccessResponseDefault(constants.STATUS_CODES.OK, ctx.response, searchQuery);
                } else {
                    response = responseProcessor.buildErrorResponse(response, constants.STATUS_CODES.BAD_REQUEST, 'query parameter is not defined');
                }
            }
            break;
        default:
            response = responseProcessor.buildErrorResponse(response, constants.STATUS_CODES.NOT_IMPLEMENTED, 'Unable to locate this endpoint for ' + method)
    }
}, request, response, session);
%>