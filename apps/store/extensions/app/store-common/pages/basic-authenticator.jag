<%
/*
 *  Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
(function(session, request, response) {
    var storeAPI = require('store');
    var permissionAPI = require('rxt').permissions;
    var params = request.getAllParameters();
    var hasUsernamePassword = params.username && params.password;
    var authenticated; //Assume that the authentication will fail
    var utils = require('utils');
    var log = new Log();
    var username = params.username;
    var password = params.password;
    var failed;
    var MultitenantConstants = Packages.org.wso2.carbon.base.MultitenantConstants;
    /**
     * Triggers carbon level tenant load events
     */
    var loadTenant = function(username) {
        var carbon = require('carbon');
        var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
        var MultitenantConstants = Packages.org.wso2.carbon.base.MultitenantConstants;
        var TenantAxisUtils = Packages.org.wso2.carbon.core.multitenancy.utils.TenantAxisUtils;
        var service;
        var ctx;
        var domain = MultitenantUtils.getTenantDomain(username);
        if (domain != null && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(domain)) {
            service = carbon.server.osgiService('org.wso2.carbon.utils.ConfigurationContextService');
            ctx = service.getServerConfigContext();
            TenantAxisUtils.setTenantAccessed(domain, ctx);
        }
    };
    /**
     * Performs basic authentication
     * @param  {String} username Accepts an email qualified username (E.g. mgjaye@gmail.com or mgjaye)
     * @param  {String} password Password provided by the user
     * @return {[type]}          True if the user is logged in else False
     */
    var authenticate = function(username,password) {
        var carbon = require('carbon');
        return storeAPI.server.instance().authenticate(username,password);
    };
    if (!hasUsernamePassword) {
        utils.response.buildErrorResponse(response, 400, "Please provide the username and password to login");
        if(log.isDebugEnabled) {
            log.debug('Attempt to login without username and password');
        }
        return;
    }

    //STEP 1 : Authenticate the user 
    try {
        authenticated = authenticate(username,password);
    } catch (e) {
        log.error('Error occured while authenticating user ',e);
        failed = true;
    }

    if(failed){
        utils.response.buildErrorResponse(response, 500, "Oops the backend seems to be experiencing issues authenticating you.");
        return;
    }

    if(!authenticated) {
        utils.response.buildErrorResponse(response, 401, "The provided username and password combination is incorrect.");
        return;
    }


    var usr = carbon.server.tenantUser(username);
    var modifiedUsername = username;
    if (usr.tenantId != MultitenantConstants.SUPER_TENANT_ID) {
        modifiedUsername = storeAPI.user.removeTenantDomainFromUsername(username);
    }
    var hasPublisherLoginPermission = false;

    //STEP 2 : Iniate loading of tenant resources
    var tenantInfo = carbon.server.tenantUser(username);
    storeAPI.server.sandbox(tenantInfo,function(){
        session.put("LOGGED_IN_USER", username);
        session.put("Loged", "true");
        loadTenant(username);
        storeAPI.user.loadTenant(username);
        //STEP 3 : Decide if the user has permission to log into the application
        hasPublisherLoginPermission = permissionAPI.hasAppPermission('APP_LOGIN', usr.tenantId,modifiedUsername);

        //STEP 4 : Emit the login event only if the user is authorized
        if(hasPublisherLoginPermission) {
            storeAPI.user.emitLogin(username);
        }
    });

    //STEP 5 : Determine the final response emitted to the user depending
    //         on whether he has login permission
    if(hasPublisherLoginPermission) {
        response.code = 200;
        var result = {};
        result.success = true;
        result.referer = params.referer;
        print(result);
    } else {
        log.warn('User ' + username + ' does not have permission to log into the store application.Make sure the user has the store role.');
        utils.response.buildErrorResponse(response, 401, "Insufficient priveleages to access the Store application.");
    }
}(session, request, response)); 
%>