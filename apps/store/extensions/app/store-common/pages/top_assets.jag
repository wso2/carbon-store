<%
/*
 *  Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
var caramel;
require('/modules/store.js').exec(function (ctx) {
    caramel = require('caramel');
    var app = require('rxt').app;
    var constants = require('rxt').constants;
    var server = require('store').server;
    var user = server.current(ctx.session);
    var ui = require('rxt').ui;
    var metrics = require('carbon-metrics').metrics;
    var tenantApi = require('/modules/tenant-api.js').api;
    var userApi = require('/modules/user-api.js').api;
    var utilsRequest = require('utils').request;
    var tenantDetails = tenantApi.createTenantDetails(request, session);
    var tenantId = tenantDetails.tenantId;
    var page = ui.buildPage(ctx.session, ctx.request, tenantId);
    var appManager;
    var log = new Log();

//    var tenantId = ctx.tenant.tenantId || constants.DEFAULT_TENANT;
    var q = ctx.request.getParameter('q');
    //search history dropdown updates
    if (q) {
        var searchQuery = utilsRequest.formatSearchQuery(q);
        userApi.updateSearchHistory(ctx.session, searchQuery);
    }
 //   var uriMatcher = new URIMatcher(ctx.request.getRequestURI());

    // var tenantedAssetPageUrl = constants.TENANT_URL_PATTERN;// '/{context}/t/{domain}/{+any}';
    // var superTenantUrl = constants.DEFAULT_SUPER_TENANT_URL_PATTERN;//  = '/{context}/{+any}';
    // var opts = uriMatcher.match(tenantedAssetPageUrl) || uriMatcher.match(superTenantUrl);

    var tenantResources = tenantApi.createTenantAwareAppResources(ctx.session);
    appManager = tenantResources.appManager;
    //var carbon = require('carbon');
    // var URLTenantId = carbon.server.tenantId({domain: opts.domain ||
    //         constants.MultitenantConstants.SUPER_TENANT_DOMAIN_NAME});

    // //Determine the type of asset manager to be created
    // if (!user || ctx.tenant.tenantId != URLTenantId) {
    //     appManager = app.createAnonAppManager(ctx.session, URLTenantId);
    // }else {
    //     appManager = app.createUserAppManager(ctx.session);
    // }
    /*if (user) {
        appManager = app.createUserAppManager(ctx.session);
    } else {
        appManager = app.createAnonAppManager(ctx.session, tenantId);
    }*/
    page.assetMeta.q = q;
    try {
        metrics.start("org.wso2.store.store-common.top-assets.app-manager.render");
        var output = appManager.render([], page);
    } finally {
        metrics.stop();
    }
    var recentAssets = output.recentAssets;
    for (var i in recentAssets) {
        if (recentAssets[i].thumbnail == 'null') {
            recentAssets[i].thumbnail = null;
        }
    }
    var qtemp = ctx.request.getParameter('q') || '';
    var searchQuery = utilsRequest.formatSearchQuery(qtemp);
    output.searchQuery = decodeURIComponent(searchQuery)||'';
    try {
        metrics.start("org.wso2.store.store-common.top-assets.caramel.render");
        caramel.render(output);
    } finally {
        metrics.stop();
    }
    //print(page);
}, request, response, session);
%>
