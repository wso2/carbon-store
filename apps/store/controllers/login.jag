<%
/*
 *  Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
(function(session, request, response) {
    var log = new Log();
    var server = require('store').server;
    var carbon = require('carbon');
    var user = server.current(session);
    var rxtAPI = require('rxt');
    var constants = rxtAPI.constants;
    var authMethod;
    var redirectURL;
    var configs = require('/config/store.js').config();
    var context = rxtAPI.app.getContext();
    var queryString = request.getQueryString();
    if (user) {
        log.info('User is already logged in');
        response.sendRedirect(context);
        return;
    }
    var resolveAuthMethod = function() {
        return configs.authentication.activeMethod;
    };
    var getRedirectURL = function(authMethod, context) {
        var url;
        var endpoint = '/pages/basic-auth-login';
        switch (authMethod) {
            case constants.AUTH_METHOD_BASIC:
                endpoint = '/pages/basic-auth-login';
                break;
            case constants.AUTH_METHOD_SSO:
                endpoint = '/pages/sso-login';
                break;
            case constants.AUTH_METHOD_OTHER:
                endpoint = '/pages/other-login';
                break;
            default:
                break;
        }
        url = context + endpoint;
        return url;
    };
    authMethod = resolveAuthMethod();
    if (!authMethod) {
        log.error('A login method has not been configured. Please make sure the activeMethod property has been set in the authentication section '
        +'of the store.json' + '.You can find this file in the /publisher/configs/publisher.json file.');
        response.sendError(500);
        return;
    }
    redirectURL = getRedirectURL(authMethod, context);
    if(queryString){
        redirectURL = redirectURL + "?" +  queryString;
    }
    response.sendRedirect(redirectURL);
}(session, request, response)); %>
