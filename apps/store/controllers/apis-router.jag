<%
/*
 *  Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
var API_URL = '/{context}/apis/{+suffix}';
var DEFAULT_TENANT = -1234;
var uriMatcher = new URIMatcher(request.getRequestURI());
var server = require('store').server;
var user = server.current(session);
var log = new Log();
var rxtAPI = require('rxt');
var getPage = function(uri) {
    var comps = uri.split('/');
    return comps.length > 0 ? comps[0] : null;
};
var mapper = function(path) {
    return function() {
        return path;
    };
};
if (uriMatcher.match(API_URL)) {
    var args = uriMatcher.elements();
    var tenantId = DEFAULT_TENANT; //Assume that the tenant will be the super tenant
    //Determine the tenant by the user 
    if (user) {
        tenantId = user.tenantId;
    }
    //Obtain the set of available pages
    var app = require('rxt').app;
    var page = getPage(args.suffix);
    var path = app.getApiEndpointPath(tenantId, page);
    if (path) {
        var file = new File(path);
        if (file.isExists()) {
            request.getMappedPath = mapper(path);
            var username = user ? user.username : null;
            var isAuthorized = rxtAPI.permissions.hasAppAPIPermission(page, tenantId, username);
            if (!isAuthorized) {
                log.error('user ' + username + ' does not have permission to access the api ' + page);
                response.sendError(401,'You do not have access to this page');
            } else {
                var proceed = app.execApiHandlers('onApiLoad', request, response, session, page);
                if (proceed) {
                    include(path);
                }
            }
        } else {
            log.error('Unable to locate mapped endpoint at path: ' + path);
            response.sendError(404, 'Unable to locate a suitable endpoint for ' + page);
        }
    } else {
        response.sendError(404, 'Unable to locate a suitable endpoint for ' + page);
    }
} else {
    response.sendError(404, 'Unable to locate a suitable endpoint');
} %>