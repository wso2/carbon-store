<%
/*
 *  Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
/*
 Description: The controller is used to serve files that are stored in the StorageManager
 Filename: storage_router.jag
 Created Date: 26/9/2013
 */
var log = new Log();
require('/modules/store.js').exec(function(ctx) {
    /**
     * Constant variables
     */
    var HEADER_CONTENT_TYPE = 'Content-Type';
    var HEADER_CONTENT_LENGTH = 'Content-Length';
    var ERROR_NOT_FOUND = 'The requested resource was not found.';
    var log = new Log('storage.router');
    var storageModule = require('/modules/data/storage.js').storageModule();
    var storageApi = require('/modules/storage-api.js').api;
    var registryOperator = require("/modules/registry/registry.operator.js").registryOperator();
    var value = {};
    var tenantedUrlPattern =    '/{context}/t/{domain}/storage/{type}/{id}/{filename}';
    var nonTenantedUrlPattern =            '/{context}/storage/{type}/{id}/{filename}';
    //Obtain the tenantId and the uuid from the url
    var uriMatcher = new URIMatcher(request.getRequestURI());
    var isMatch = uriMatcher.match(nonTenantedUrlPattern) || uriMatcher.match(tenantedUrlPattern);
    var carbon = require('carbon');
    var store = require('store');
    PrivilegedCarbonContext = org.wso2.carbon.context.PrivilegedCarbonContext;
    //Handle the request only if the url matches
    if (isMatch) {
        var matchedElements = uriMatcher.elements();
        handleResourceRequest(ctx.session, matchedElements);
    } else {
        if (log.isDebugEnabled) {
            log.debug('url pattern : ' + request.getRequestURI() + ' did not match neither tenanted nor non tenanted url pattern');
        }
        response.sendError(404, ERROR_NOT_FOUND);
    }
    /**
     *  The function services the requests for a resource by using the matched elements
     *  @matchedElements: A list of elements extracted from the url
     */
    function handleResourceRequest(session, matchedElements) {
        var registryOperator = require("/modules/registry/registry.operator.js").registryOperator();
        var type = matchedElements['type'];
        var id = matchedElements['id'];
        var compoundKey = type + '/' + id + '/' + matchedElements['filename'];
        var tenantId = carbon.server.superTenant.tenantId;
        var user = store.server.current(session);
        //Attempt to obtain the tenant id from the domain provided 
        // if (matchedElements.domain) {
        //     tenantId = carbon.server.tenantId({
        //         domain: matchedElements.domain
        //     });
        // }
        //If there is a logged in user then the tenantId should inherit from the currently logged in user
        // if (user) {
        //     tenantId = user.tenantId;
        // }
        var carbonContext = PrivilegedCarbonContext.getThreadLocalCarbonContext();
        tenantId = carbonContext.getTenantId();
        //Check if the user is allowed to access the resource
        var isAllowed = storageApi.isAssetResourceAccessible(type, id, compoundKey, session, tenantId); 
        //Stop the request if the user does not have permission
        if (!isAllowed) {
            response.sendError(401, 'Unauthorized to access resources of asset ' + id + ' of type: ' + type);
            return isAllowed;
        }
        var fetchedFile = registryOperator.getFile(compoundKey, tenantId);
        //Check if a value was returned from storage
        if ((!fetchedFile) || (!fetchedFile.resource)) {
            if(log.isDebugEnabled){
                log.debug('Asset was not retrieved');
            }
            response.sendError(404, ERROR_NOT_FOUND);
        } else {
            //Get the image details
            var contentType = fetchedFile.resource.mediaType;
            //Create the headers
            response.addHeader(HEADER_CONTENT_TYPE, contentType);
            try {
                //Send the file stream
                print(fetchedFile.content);
            } catch (e) {
                log.error('Unable to serve the asset resource', e);
                response.sendError(500);
            }
        }
    }
}, request, response, session); %>