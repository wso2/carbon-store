<%
/*
 *  Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
require('/modules/publisher.js').exec(function(ctx) {
    var utils = require('utils');
    var rxt = require('rxt');
    var ref = utils.request;
    var GET_TAGS_PATTERN = '/{context}/apis/tags';
    var responseProcessor = utils.response;
    var constants = rxt.constants;
    var response = ctx.response;
    var req = ctx.request;
    var uriMatcher = new URIMatcher(ctx.request.getRequestURI());
    var method = req.getMethod();
    var options = ref.getQueryOptions(req.getQueryString());
    var context = rxt.core.createUserAssetContext(ctx.session, options.type);
    var tagsResults;
    switch (method) {
        case 'GET':
            if (uriMatcher.match(GET_TAGS_PATTERN)) {
                //How to obtain the  OSGi service
                var carbon = require('carbon');
                var osgiServiceName = 'org.wso2.carbon.registry.indexing.service.TermsSearchService';
                var osgiService = carbon.server.osgiService(osgiServiceName);
                var hashMap = Packages.java.util.HashMap;
                var map = new hashMap;
                map.put("facet.field", "tags");
                map.put("facet.prefix", utils.request.getQueryOptions(ctx.request.getQueryString()).prefix);
                map.put("mediaType", context.rxtManager.getMediaType(utils.request.getQueryOptions(ctx.request.getQueryString()).type));
                tagsResults = osgiService.search(map);
                var tags;
                var tagsArr = [];
                var item;
                var result = {};
                for (var i = 0; i < tagsResults.length; i++) {
                    tags = tagsResults[i];
                    item = {};
                    item.name = tags.getTerm();
                    item.count = tags.getFrequency();
                    tagsArr.push(item);
                }
                ctx.response.contentType = 'application/json';
                result.data = tagsArr;
                print(result);
            }
            break;
        default:
            response = responseProcessor.buildErrorResponse(response, constants.STATUS_CODES.NOT_IMPLEMENTED, 'Unable to locate this endpoint for ' + method)
    }
}, request, response, session); 
%>