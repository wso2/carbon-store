<%
/*
 * Copyright (c) WSO2 Inc. (http://wso2.com) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 Description :to route api calls to endpoints
 Filename: assets.jag

 */
var log = new Log('assets_api_router');
var matcher = new URIMatcher(request.getRequestURI());
var apiEndpoint = '/{context}/apis/{+suffix}';
var asset = require('rxt').asset;
var req = require('utils').request;
var responseProcessor = require('utils').response;
var response = response;
response.contentType = 'application/json';

/**
 * getPage context
 * @param {uri} uri  : request uri
 */
var getPage = function (uri) {
    var comps = uri.split('/');
    return comps.length > 0 ? comps[0] : null;
};

var mapper = function (path) {
    return function () {
        return path;
    };
};

/**
 * To rout to asset endpoints
 * @param request   The request object in the request call
 * @param session   The sessionID of the logged in user
 * @param uriParams  URI parameters sent in request
 */
var handleApiEndpoint = function (request, session, uriParams) {
    var options = req.getQueryOptions(request.getQueryString());
    var type = options.type;
    var page = getPage(uriParams.suffix);
    try {
        var endPoints = asset.getAssetApiEndpoints(session, type);
        var endpoint;
        for (var index in endPoints) {
            if (endPoints[index].url == page) {
                endpoint = asset.getAssetApiEndpoint(type, endPoints[index].path);
            }
        }
        if (endpoint) {
            request.getMappedPath = mapper(endpoint);
            include(endpoint);
        } else {
            response = responseProcessor.buildErrorResponse(response, 404, 'Unable to locate an api endpoint for the type: ' + type)
        }
    } catch (e) {
        log.error(e);
        response = responseProcessor.buildErrorResponse(response, 404, e);

    }
};

var server = require('store').server;
var user = server.current(session);
//remove
if (!user) {//unless user is authenticated
    log.error('Auth failure');
    response = responseProcessor.buildErrorResponse(response, constants.STATUS_CODES.UNAUTHORIZED, "Authorization Error");
}
else {
    if (matcher.match(apiEndpoint)) {// if endpoint is defined
        handleApiEndpoint(request, session, matcher.elements());	//route to the endpoint
    }
    else {
        response = responseProcessor.buildErrorResponse(response, 404, 'Unable to route the request to an appropriate endpoint');
    }
}
 	