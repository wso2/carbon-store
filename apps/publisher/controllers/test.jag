<% 
    var rxtAPI = require('rxt');
    var constants = rxtAPI.constants;
    var core = rxtAPI.core;
    var log = new Log();
    var matchFile = function(fileName,dir){
        var files = dir.listFiles();
        var found = false;
        for(var index = 0 ; (index <  files.length ) && (!found); index++){
            if(files[index].getName() === fileName){
                found = true;
            }
        }
        return found;
    };
    var hasAppScript = function(dir){
        return matchFile('app.js',dir);
    };
    var hasAssetScript = function(dir){
        return matchFile('asset.js',dir);
    };
    var readScriptContent = function(file){
        var content = '';
        try{
            file.open('r');
            content = file.readAll();
        } catch(e){
            log.error('Unable to read contents of '+file.getPath()+' '+file.getName(),e);
        } finally{
            file.close();
        }
        return content;
    };
    var appExtensionPath = function(dir){
        return dir.getPath()+'/app.js';
    };
    var assetExtensionPath = function(dir){
        return dir.getPath()+'/asset.js';
    }
    var evalExtensionScript = function(dir){
        var file = new File(appExtensionPath(dir));
        var content = readScriptContent(file);
        var script = 'function(app,log){' + content + '}';
        var module = {};
        var  l = new Log(file.getName());
        var ptr;
        module.dependencies = [];
        ptr = eval(script);
        ptr.call(this,module,l);
        return module;
    };
        function DefaultAppExtensionMediatorImpl(path){
        this.path = path;
    }
    DefaultAppExtensionMediatorImpl.prototype.resolveCaramelResources = function(resourcePath,theme,caramelThemeResolver) {
        var file;
        var fullPath = this.path + '/' + resourcePath;
        file = new File(fullPath);
        if(file.isExists()){
            return fullPath;
        }
        return caramelThemeResolver(theme, resourcePath);
    };
    function DefaultAppExtensionMediator(impl) {
        this.impl = impl;
    }
    DefaultAppExtensionMediator.prototype.manager = function() {};
    DefaultAppExtensionMediator.prototype.renderer = function() {};
    DefaultAppExtensionMediator.prototype.configs = function() {};
    DefaultAppExtensionMediator.prototype.resolveCaramelResources = function(resourcePath,theme,caramelThemeResolver) {
        var file;
        var fullPath = this.path + '/' + resourcePath;
        theme = theme || {};
        caramelThemeResolver = caramelThemeResolver || function(theme,path) { return path};
        if(!this.impl){
            return caramelThemeResolver(theme,path);
        }
        return this.impl.resolveCaramelResources(resourcePath,theme,caramelThemeResolver);
    };

    var loadDefaultAppExtensions = function(){
        //Go through each app extension 
        var dirPath = '/extensions/app';
        var dir = new File(dirPath);
        var extensionDir;
        var extensionDirs;
        var extension;
        var dependencies;
        var mediator;
        var mediatorImpl;
        var ignore = false;
        var found = false; //Assume that no default extensions will be found
        if(!dir.isDirectory()){
            log.error('Unable to read the app extension directory');
            return;
        }
        extensionDirs = dir.listFiles() || [];
        extensionDir;
        for(var index = 0; index < extensionDirs.length ; index++){
            extensionDir = extensionDirs [index];
            log.info('checking extension: '+extensionDir.getName());
            //Check if there is an asset script
            if(hasAppScript(extensionDir)){
                //Get the extension details
                extension = evalExtensionScript(extensionDir);
                dependencies = extension.dependencies || [];
                ignore =  extension.ignoreExtension || false;

                if(((dependencies.indexOf(constants.DEFAULT_APP_EXTENSION)>-1) && (!ignore))&&(found)){
                    log.error('An extension which overrides the default asset extension was already loaded, thus app extension: '+extensionDir.getName()
                        +' will be ignored.Please make sure that there is only one app extension which declares a dependency to "default".');
                }

                //Check if "default" is one of the dependencies
                if(((dependencies.indexOf(constants.DEFAULT_APP_EXTENSION)>-1) && (!ignore))&&(!found)){
                    log.info('found an app extension which overrides the default asset extension: '+extensionDir.getName());
                    found = true;
                    //Build a mediator
                    mediatorImpl = new DefaultAppExtensionMediatorImpl(extensionDir.getPath());
                    mediator = new DefaultAppExtensionMediator(mediatorImpl);
                    core.defaultAppExtensionMediator(mediator);
                    log.info('-> '+mediator.resolveCaramelResources('/apples'));
                }

            }
        }
    };
    function DefaultAppExtensionMediatorImpl(path){
        this.path = path;
        this.assetExtension = {};
        this.init();
    }
    DefaultAppExtensionMediatorImpl.prototype.resolveCaramelResources = function(resourcePath,theme,caramelThemeResolver) {
        var file;
        var fullPath = this.path + '/' + resourcePath;
        file = new File(fullPath);
        if(file.isExists()){
            return fullPath;
        }
        return caramelThemeResolver(theme, resourcePath);
    };
    DefaultAppExtensionMediatorImpl.prototype.init = function(){
        var extensionDir = new File(this.path);
        var scriptFile = new File(assetExtensionPath(extensionDir));
        var content = readScriptContent(scriptFile);
        var extension = {};
        var script = 'function(asset,log) { '+content+' } ';
        var l = new Log();
        var ptr = eval(script);
        ptr.call(this,extension,l);
        this.assetExtension = extension || {};
        //log.info(this.assetExtension.renderer().pageDecorators);
    };
    DefaultAppExtensionMediatorImpl.prototype.manager = function(){
        return this.assetExtension.manager;
    };
    DefaultAppExtensionMediatorImpl.prototype.renderer = function(){
        return this.assetExtension.renderer;
    };
    function DefaultAppExtensionMediator(impl) {
        this.impl = impl;
    }
    DefaultAppExtensionMediator.prototype.manager = function() {
        if(!this.impl){
            return null;
        }
        return this.impl.manager();
    };
    DefaultAppExtensionMediator.prototype.renderer = function() {
        if(!this.impl){
            return null;
        }
        return this.impl.renderer();
    };
    DefaultAppExtensionMediator.prototype.configs = function() {};
    DefaultAppExtensionMediator.prototype.resolveCaramelResources = function(resourcePath,theme,caramelThemeResolver) {
        var file;
        var fullPath = this.path + '/' + resourcePath;
        theme = theme || {};
        caramelThemeResolver = caramelThemeResolver || function(theme,path) { return path};
        if(!this.impl){
            return caramelThemeResolver(theme,path);
        }
        return this.impl.resolveCaramelResources(resourcePath,theme,caramelThemeResolver);
    };

    loadDefaultAppExtensions();


/*require('/modules/publisher.js').exec(function(ctx) {
    var storeAPI = require('store');
    var assetAPI = require('rxt').asset;
    var am = assetAPI.createUserAssetManager(session, 'servicex');
    var afm = am.am;
    var manager = afm.manager;
    var q = {};
    var log = new Log();


    //q.propertyName = 'default';
    //q.rightPropertyValue = true;
    //q.rightOp = 'eq';
    //q.leftOp = 'na';
    q._group = true;
    //q._wildcard = true;
    q.overview_provider='org.wso2';

    //q.resourcePath = '/_system/governance/servicesx/org.wso2/test-wso2-service/1.0.0';
    //q.overview_name='wso2';
    var defaultPaging = {
        'start': 0,
        'count': 1000,
        'sortOrder': 'desc',
        'sortBy': 'overview_createdtime',
        'paginationLimit': 1000
    };
    
    var result = am.search(q,defaultPaging);//am.getAssetGroup(q.overview_name,defaultPaging);//am.search(q,defaultPaging);

    log.info(result);
     */
     
     
	// var HashMap = java.util.HashMap;
 //    var ArrayList = java.util.ArrayList;
 //    var map = new HashMap();

 //    var propList = new ArrayList();
 //    propList.add('default');
 //    var rightPropertyList = new ArrayList();
 //    rightPropertyList.add('true');
 //    var rightOpList = ArrayList();
 //    rightOpList.add('eq');
 //    var leftOpList = ArrayList();
 //    leftOpList.add('na');

 //    map.put('propertyName',propList);
 //    map.put('rightPropertyValue',rightPropertyList);
 //    map.put('rightOp',rightOpList);
 //    map.put('leftOp',leftOpList);

 //    var artifacts = manager.findGenericArtifacts(map);
 //    log.info(artifacts);



// var URL = 'https://na9.salesforce.com/services/data/v26.0/query/?q=SELECT+Id+FROM+Opportunity+WHERE+CreatedDate+>=+2015-02-01T00:00:00Z';
// var url = encodeURI(URL);
// var result = get(url);
// log.info(result);
%>